name: Deploy prepared application to EKS cluster

on:
  workflow_dispatch:

env:
  AWS_DEFAULT_REGION: eu-central-1

jobs:
  tf_plan:
    name: Terraform plan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Plan Terraform changes
        env:
          TF_VAR_GITHUB_THUMBPRINTS: ${{ secrets.GITHUB_THUMBPRINTS }}
        run: |
          cd terraform/
          terraform init
          terraform plan

  deploy:
    needs: tf_plan
    name: Apply changes and deploy to EKS cluster
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Apply Terraform changes
        env:
          TF_VAR_GITHUB_THUMBPRINTS: ${{ secrets.GITHUB_THUMBPRINTS }}
        run: |
          cd terraform/
          terraform init
          terraform apply -auto-approve

      - name: Terraform outputs
        id: terraform-outputs
        env:
          TF_VAR_GITHUB_THUMBPRINTS: ${{ secrets.GITHUB_THUMBPRINTS }}
        run: |
          cd terraform/
          terraform init
          echo "ECR_REGISTRY=$(terraform output registry_id)" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY=$(terraform output repository_url)" >> $GITHUB_OUTPUT
          echo "EKS_CLUSTER=$(terraform output cluster_endpoint)" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.terraform-outputs.outputs.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ steps.terraform-outputs.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: latest
          IMAGE: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        run: |
          cd app/
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Install Kubectl
        uses: azure/setup-kubectl@v3

      - name: Update KubeConfig
        env:
          AWS_CLUSTER_NAME: ${{ steps.terraform-outputs.outputs.EKS_CLUSTER }}
        run: |
          aws eks update-kubeconfig --name ${{ env.AWS_CLUSTER_NAME }} --region=${{ env.AWS_DEFAULT_REGION }}

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin

      - name: Deploy to EKS cluster
        env:
          ECR_REGISTRY: ${{ steps.terraform-outputs.outputs.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ steps.terraform-outputs.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: latest
          IMAGE: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        run: |
          cd k8s/
          kustomize edit set image jokes-image=$IMAGE
          kustomize build /kustomize --enable-helm | kubectl kustomize --enable-helm | kubectl apply -f -
